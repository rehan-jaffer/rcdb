== Chemical Observer Project

=== Requirements
* Postgres >= 9.3 - due to use of hstore, upgrading to 9.4 is in the pipeline to be able to use jsonb over json type for performance reasons (largely due to indexing pubchem data). Given that Postgres 9.5 is out, consider upgrading.
* Bower - Used to manage front-end dependencies, most easily installed via node package manager
* Ruby 2.x
* Currently using plain JavaScript rather than ES6 through a transpiler, since the latter is harder to debug on a larger scale.

=== Deployment Pipeline
* Currently deployment is done through Codeship and Capistrano, if you're using the code in development you probably want to comment out the gems related to capistrano as the Capfile is not in the repo

=== Gems
* simple_form_for - automagic form inference/generation for views
* HAML - used for HTML layout files except in a few circumstances
* twitter-bootstrap - The gem has a lot of advantages over using it via Bower, since it plugs easily into the rest of the Rails ecosystem pretty nicely.

=== Other Libraries
* Underscore - Swiss toolkit for iterating, minimal footprint
* Handlebars - Lightweight templating library to make things a little easier, avoided adding another gem to the Rails dependencies by using Bower to manage it and adding the handlebars_template(id) helper, allows the writing of handlebar templates in HAML easily

=== Testing
* RSpec 3.x for unit/functional testing
* Capybara for integration testing
* Capybara-webkit used for headless integration testing (has resulted in being faster and easier to run on a test server), note that this introduces a libqt5 dependency. In order to avoid this, comment out capybara-webkit in the Gemfile and replace it with selenium, and remove the following line in spec/rails_helper.rb: 

    Capybara.javascript_driver = :webkit  

* Mutant for mutation testing, test quality of tests.
* DatabaseCleaner for wiping the Test database between test runs

=== Forms
* JavaScript needs to be added for adding extra Array items to the forms, and the hacky fix that checks for Array fields and populates empty ones needs to be eliminated. It's a source of bugs any time the models change, point of failure (contained in the Drug model)

=== Rake Tasks
==== Papers
* papers:scrape will run for each pubmed RSS feed supplied and pull the contents into the database. At present paper URLs have to be manually entered, but there should be a way to obtain the XML/RSS feed URL programmatically since we're really just looking at grabbing the title in a search query. Mechanize can be used if necessary, but probably isn't required.
==== PubChem
* pubchem:harvest Will check for all entries that have a 'cid' (pubchem ID) present and pull the relevant JSON data into the database where possible. This needs to be updated to pull more relevant pubchem data, as at present it's not really providing any useful extra information, better understanding of pubchem API is required.
==== Sitemap
* sitemap:generate will create an XML sitemap for each drug entry and for the relevant listing page, to aid with google's indexing
==== Google Trends
* drugs:populate_data scrapes the Google Trends API (it's not exactly scraping, the same page request is used that's used with any request, and the JSON data is parsed out). This needs to be refactored to use the same dataset rather than repeating the request 3 times, as Google detects the pattern and rate-limits pretty quickly. It doesn't ban clients, but this makes it pretty difficult to obtain data for a large quantity of substances.

=== Some setup instructions
* Running bower install will install the front-end dependencies

=== Object/Model Map

==== Drug
A particular class of drug, defined by a fairly fuzzy set of categories with a set of attributes in common (e.g Benzodiazepines) is descended from the common drug class that dictates most of its behaviour. Descendents can add additional behaviours such as in the case of benzodiazepines where each should have a defined valium equivalent, as well as a set of hstore keys for the affinity field defining the neuroreceptor affinities.
Drug classes are defined in the config/application.rb as an Array, each should have a corresponding controller and model class.
Each Drug also has a set of relationships with a set of other objects:
* Effects - both intended and unintended (side effects)
* Votes - votes on properties such as harm rating and addiction_rating. While these specify a drug_id, the actual vote tally should be calculated every 12-24 hours
* Localities - A set of entries defining the legality of the substance in a particular jurisdiction
==== A note on affinities
The implementation using hstore seemed like a really great idea at the time and the code seemed really clever. It doesn't anymore, this should just be moved into a separate table. Was definitely trying to be too smart.

=== API

==== V1
* Drug lookup via name only, provide simple JSON data back

==== V2
* Allow searching by side effect, secondary data

=== Security Testing
This desperately needs doing before the project goes public. sqlmap for various exploit vectors, along with RSpec-based testing for non-users being able to edit things they shouldn't, or submit data they shouldn't.

=== Notes
* This design isn't responsive, it needs to be, but it's a feature that'll have to be added over time. The UI works, that's been the priority, responding to screen types is the next step.
* Accessibility testing needs to be added. There's a gem for this, you've used it before, dig up that project code and find out how you did it.
* Metabolic enzymes need to be added in some capacity, model this and figure out how to do it and avoid the prior mistakes of shoving too much into the drug model

=== Additional Features (added as they're thought up)
* Potentially use GeoIP to set the user's location in session/cookie


=== NOTICE
Anything below this line was written quite a while ago and might be outdated

=== Purpose

To provide a collaborative platform for users to be able to compile available data on Research Chemicals/Legal Highs, along with predictive analysis of trends in usage, giving clinicians early warnings of current trends in the use of such drugs, and the most up to date information. Also to provide consumers of these substances with as much harm reduction information as possible.

=== Preface

I'm playing fast and loose with this prototype, it's still highly experimental and the goal is to have a working version that I can demonstrate as fast as possible. As a result refactoring and testing has taken a backseat until the first prototype release. Don't judge me! I'm also using Heroku to avoid procrastinating by fiddling with the server stack excessively. Whatever will accelerate development.

=== Design

I propose several classes of user:
* Consumers - users of the substance in question, who will be encouraged to submit information, harm/addiction potential, and "consumer reports" on substances.
* Clinicians - licensed medical professionals, who will require manual verification in order to gain this status
* Moderators - people who will review submitted data for grammar/spelling and potentially harmful content before it is added to the information database
* Scientists - group including chemists or pharmacologists who may be able to shed light on the structure-activity relationship, possible complications, and if possible are able to carry out random sampling of Research Chemicals from various vendors for quality/content checks.

== Notes

This is still a very rough/messy project and needs refactoring and proper tests, my current focus on getting a prototype up and working as fast as possible. The heroku link can be found at http://chemicalobserver.com

== Features requiring implementation before prototype launch

* Check for cross-browser compatibility
* Rewrite JS into OO/clean format
* Change cursor on overlay of papers expansion link
* Add controllers for dissociatives and opiates
* Add more tests for basic functionality
* Test in a range of resolutions
* Save data-sets for raw and 'buy' versions in db form

== Requirements for version 1.0

* Basic integration test suite
* Basic model unit tests

== Features for version 1.1

* Voting up/down for paper relevance

== Key Metrics for Code Quality

sandi_meter gem:
  1. Classes are under 100 lines.
  2. Methods are under 5 lines.
  3. Method calls accepted are less than 4 parameters.
  4. Controllers have one instance variable per action.


== Areas that need improvement

* Clean up drug->substance inheritance system

== TODO list

* Add dashboards for various user types
* Integrate content editing system with queueing
* Implement paper relevance up/down-voting
* Add placeholder content
* Style papers tooltip to be wider (how to do this in a responsive fashion?)
* Enable submission of consumer reports
* Add flags to consumer reports
* Add user classes to registration/sign-up page
* Add back-end system that requires activation for clinician verification for usage in the system
* Add custom 404 and 500 pages

== Data sources for integrated analytics

=== Pubmed API
Allows the aggregation of papers on a given substance by its chemical name. This data is displayed on the drug's page, with the ability to up/down vote papers for relevance (clinicians only).

==== Proposed system:
* Vote -> Redis for tracking duplicate votes and temporary storage (ttl should be ~24 hours) -> every 12 hours votes are aggregated via a rake task through cron, and the paper "relevance" scores are updated.

=== Google Trends

==== Proposed system:
* Infer first occurance date by using the trends data on the first time that this was searched for (already in place)
* Extract information on recent consumption trends (last 3 months) compared to the last 6 months to determine degree of "upward trending"

=== Reddit

==== Proposed system:
* This still remains under investigation, but reddit remains a source of interesting anecdotal information on particular substances

== Analytics Tools

=== Alchemy API
API Key obtained via http://www.alchemyapi.com/

==== Proposed System
* None as yet, still toying with the API
