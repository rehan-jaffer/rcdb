== Chemical Observer Project

=== Purpose

To provide a collaborative platform for users to be able to compile available data on Research Chemicals/Legal Highs, along with predictive analysis of trends in usage, giving clinicians early warnings of current trends in the use of such drugs, and the most up to date information. Also to provide consumers of these substances with as much harm reduction information as possible.

=== Preface

I'm playing fast and loose with this prototype, it's still highly experimental and the goal is to have a working version that I can demonstrate as fast as possible. As a result refactoring and testing has taken a backseat until the first prototype release. Don't judge me! I'm also using Heroku to avoid procrastinating by fiddling with the server stack excessively. Whatever will accelerate development.

=== Design

I propose several classes of user:
* Consumers - users of the substance in question, who will be encouraged to submit information, harm/addiction potential, and "consumer reports" on substances.
* Clinicians - licensed medical professionals, who will require manual verification in order to gain this status
* Moderators - people who will review submitted data for grammar/spelling and potentially harmful content before it is added to the information database
* Scientists - group including chemists or pharmacologists who may be able to shed light on the structure-activity relationship, possible complications, and if possible are able to carry out random sampling of Research Chemicals from various vendors for quality/content checks.

== Notes

This is still a very rough/messy project and needs refactoring and proper tests, my current focus on getting a prototype up and working as fast as possible. The heroku link can be found at http://chemicalobserver.com

== Features requiring implementation before prototype launch

* Integration of predictive analysis data with the web-based system
* Registration system for different levels/classes of user
* Upwards trending substances list/RSS feed

== Requirements for version 1.0

* Basic integration test suite
* Basic model unit tests

== Features for version 1.1

* Voting up/down for paper relevance

== Key Metrics for Code Quality

sandi_meter gem:
  1. Classes are under 100 lines.
  2. Methods are under 5 lines.
  3. Method calls accepted are less than 4 parameters.
  4. Controllers have one instance variable per action.


== Areas that need improvement

* Clean up drug->substance inheritance system

== TODO list

* Add dashboards for various user types
* Integrate content editing system with queueing
* Implement paper relevance up/down-voting
* Create temporary logo
* Add placeholder content
* Style papers tooltip to be wider (how to do this in a responsive fashion?)
* Enable submission of consumer reports
* Add flags to consumer reports
* Add user classes to registration/sign-up page
* Add back-end system that requires activation for clinician verification for usage in the system
* Add custom 404 and 500 pages

== Data sources for integrated analytics

=== Pubmed API
Allows the aggregation of papers on a given substance by its chemical name. This data is displayed on the drug's page, with the ability to up/down vote papers for relevance (clinicians only).

==== Proposed system:
* Vote -> Redis for tracking duplicate votes and temporary storage (ttl should be ~24 hours) -> every 12 hours votes are aggregated via a rake task through cron, and the paper "relevance" scores are updated.

=== Google Trends

==== Proposed system:
* Infer first occurance date by using the trends data on the first time that this was searched for (already in place)
* Extract information on recent consumption trends (last 3 months) compared to the last 6 months to determine degree of "upward trending"

=== Reddit

==== Proposed system:
* This still remains under investigation, but reddit remains a source of interesting anecdotal information on particular substances

== Analytics Tools

=== Alchemy API
API Key obtained via http://www.alchemyapi.com/

==== Proposed System
* None as yet, still toying with the API
